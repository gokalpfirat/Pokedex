{"version":3,"sources":["containers/InfiniteScroll/index.js","components/LoadMore/index.js","containers/Homepage/index.js"],"names":["InfiniteScroll","cb","entries","forEach","entry","isIntersecting","props","callback","IntersectionObserver","this","root","rootMargin","threshold","observe","loadRef","current","children","Component","LoadMore","loadedCount","totalCount","loadMore","isLoading","className","onClick","disabled","Homepage","a","pageContext","listType","searchValue","state","infiniteScrollLoading","length","setState","context","addLoadedPokemons","loadedPageNum","getPokemonList","POKEMON_PER_PAGE","pokemons","loadMorePokemonsToCache","createRef","setTotalPokemonCount","pageNum","count","loadedPokemons","filteredList","filter","pokemon","name","toLowerCase","includes","CardList","list","ref","style","textAlign","LoadingCircle","loadingState","InformationBox","totalPokemons","contextType","PokemonContext"],"mappings":"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","file":"static/js/6.ce2dac17.chunk.js","sourcesContent":["import { Component } from \"react\";\r\n\r\nclass InfiniteScroll extends Component {\r\n  cb = (entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        this.props.callback();\r\n      }\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    const options = {\r\n      root: null,\r\n      rootMargin: \"600px\",\r\n      threshold: 0\r\n    };\r\n\r\n    const observer = new IntersectionObserver(this.cb, options);\r\n    observer.observe(this.props.loadRef.current);\r\n  }\r\n  render() {\r\n    return <>{this.props.children}</>;\r\n  }\r\n}\r\n\r\nexport default InfiniteScroll;\r\n","import \"./style.css\";\r\n\r\nconst LoadMore = ({ loadedCount, totalCount, loadMore, isLoading }) => {\r\n  return (\r\n    <div className=\"load_more\">\r\n      {totalCount !== loadedCount ? (\r\n        <div>\r\n          Can't find your result from{\" \"}\r\n          <strong>\r\n            {loadedCount}/{totalCount}\r\n          </strong>\r\n          loaded pokemons?\r\n          <button\r\n            className=\"load_more__button\"\r\n            onClick={loadMore}\r\n            disabled={isLoading}\r\n          >\r\n            Load More\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <strong>No more to load, these are all results!</strong>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default LoadMore;\r\n","import { Component, createRef } from \"react\";\r\nimport { getPokemonList } from \"../../api\";\r\nimport { POKEMON_PER_PAGE } from \"../../config/constants\";\r\nimport PokemonContext from \"../../context/PokemonContext\";\r\nimport InfiniteScroll from \"../InfiniteScroll\";\r\nimport CardList from \"../CardList\";\r\nimport LoadingCircle from \"../../components/LoadingCircle\";\r\nimport InformationBox from \"../../components/InformationBox\";\r\nimport LoadMore from \"../../components/LoadMore\";\r\n\r\nclass Homepage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      infiniteScrollLoading: false\r\n    };\r\n    // This is used as Intersection Observer element\r\n    this.loadRef = createRef();\r\n  }\r\n  static contextType = PokemonContext;\r\n\r\n  // Load Pokemons at Infinity Scroll\r\n  loadMore = async () => {\r\n    const { listType, searchValue } = this.props.pageContext;\r\n    if (\r\n      !this.state.infiniteScrollLoading &&\r\n      !searchValue.length &&\r\n      listType === \"all\"\r\n    ) {\r\n      this.setState({ infiniteScrollLoading: true });\r\n      const { addLoadedPokemons, loadedPageNum } = this.context;\r\n      const { pokemons } = await getPokemonList(\r\n        POKEMON_PER_PAGE,\r\n        loadedPageNum\r\n      );\r\n      addLoadedPokemons(pokemons, () => {\r\n        this.setState({\r\n          infiniteScrollLoading: false\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Load Pokemons to cache if search is not found\r\n  loadMorePokemonsToCache = async () => {\r\n    if (!this.state.infiniteScrollLoading) {\r\n      this.setState({ infiniteScrollLoading: true });\r\n      const { addLoadedPokemons, loadedPageNum } = this.context;\r\n      const { pokemons } = await getPokemonList(\r\n        POKEMON_PER_PAGE,\r\n        loadedPageNum\r\n      );\r\n      addLoadedPokemons(pokemons, () => {\r\n        this.setState({\r\n          infiniteScrollLoading: false\r\n        });\r\n      });\r\n    }\r\n  };\r\n  async componentDidMount() {\r\n    const {\r\n      addLoadedPokemons,\r\n      loadedPageNum,\r\n      setTotalPokemonCount\r\n    } = this.context;\r\n    if (loadedPageNum === 0) {\r\n      const { pokemons, count } = await getPokemonList(\r\n        POKEMON_PER_PAGE,\r\n        this.state.pageNum\r\n      );\r\n      setTotalPokemonCount(count);\r\n      addLoadedPokemons(pokemons);\r\n    }\r\n  }\r\n  render() {\r\n    const { pageContext } = this.props;\r\n    const { listType, searchValue } = pageContext;\r\n    const { loadedPokemons, totalCount } = this.context;\r\n    // Filterin Lists\r\n    const filteredList = loadedPokemons.filter((pokemon) => {\r\n      return pokemon.name.toLowerCase().includes(searchValue.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      loadedPokemons.length > 0 && (\r\n        <InfiniteScroll loadRef={this.loadRef} callback={this.loadMore}>\r\n          <CardList list={filteredList}></CardList>\r\n          {loadedPokemons.length !== totalCount ? (\r\n            <div ref={this.loadRef} style={{ textAlign: \"center\" }}>\r\n              <LoadingCircle\r\n                loadingState={!searchValue.length && listType === \"all\"}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <InformationBox>You saw all Pok√©mons!</InformationBox>\r\n          )}\r\n          {searchValue.length > 0 && (\r\n            <InformationBox>\r\n              <LoadMore\r\n                loadedCount={this.context.loadedPokemons.length}\r\n                totalCount={this.context.totalPokemons}\r\n                loadMore={this.loadMorePokemonsToCache}\r\n                isLoading={this.state.infiniteScrollLoading}\r\n              />\r\n            </InformationBox>\r\n          )}\r\n        </InfiniteScroll>\r\n      )\r\n    );\r\n  }\r\n}\r\nexport default Homepage;\r\n"],"sourceRoot":""}